geom_density(alpha=0.2, fill=medsl_brands[1]) + theme_minimal() + geom_vline(xintercept=0, col=medsl_brands[5])
coef_density_plot_donations_diff
coef_density_plot_donations_diff <- ggplot(data=wide_coef_df, aes(x=coef_diff_donor)) +
geom_density(alpha=0.2, fill=medsl_brands[1]) + theme_minimal() + geom_vline(xintercept=0, col=medsl_brands[6])
coef_density_plot_donations_diff
coef_density_plot_donations_diff <- ggplot(data=wide_coef_df, aes(x=coef_diff_donor)) +
geom_density(alpha=0.2, fill=medsl_brands[1]) + theme_minimal() + geom_vline(xintercept=0, col=medsl_brands[6],lwd=1.5)
coef_density_plot_donations_diff
coef_density_plot_donations_diff <- ggplot(data=wide_coef_df, aes(x=coef_diff_donor)) +
geom_density(alpha=0.2, fill=medsl_brands[1]) + theme_minimal() + geom_vline(xintercept=0, col=medsl_brands[6],lwd=1.5,
linetype="dotted")
coef_density_plot_donations_diff
coef_density_plot_donations_diff <- ggplot(data=wide_coef_df, aes(x=coef_diff_donor)) +
geom_density(alpha=0.2, fill=medsl_brands[1]) + theme_minimal() +
geom_vline(xintercept=0, col=medsl_brands[6],lwd=1.5,linetype="dotted") +
theme(legend.title = "Difference in Donor Estimate", x="Difference in estimate",y="Density")
coef_density_plot_donations_diff
coef_density_plot_donations_diff <- ggplot(data=wide_coef_df, aes(x=coef_diff_donor)) +
geom_density(alpha=0.2, fill=medsl_brands[1]) + theme_minimal() +
geom_vline(xintercept=0, col=medsl_brands[6],lwd=1.5,linetype="dotted") +
labs(legend.title = "Difference in Donor Estimate", x="Difference in estimate",y="Density")
coef_density_plot_donations_diff
coef_density_plot_donations_diff <- ggplot(data=wide_coef_df, aes(x=coef_diff_donor)) +
geom_density(alpha=0.2, fill=medsl_brands[1]) + theme_minimal() +
geom_vline(xintercept=0, col=medsl_brands[6],lwd=1.5,linetype="dotted") +
labs(title = "Difference in Donor Estimate", x="Difference in estimate",y="Density")
coef_density_plot_donations_diff
dquantile(wide_coef_df$coef_diff_donor, 0)
percentile <- ecdf(wide_coef_df$coef_diff_donor)
percentile(0)
percentile_donor <- ecdf(wide_coef_df$coef_diff_donor)
percentile_donor(0)
coef_density_plot_gas_diff <- ggplot(data=wide_coef_df, aes(x=coef_diff_gas)) +
geom_density(alpha=0.2, fill=medsl_brands[1]) + theme_minimal() +
geom_vline(xintercept=0, col=medsl_brands[6],lwd=1.5,linetype="dotted") +
labs(title = "Difference in Gas Production Estimate", x="Difference in estimate",y="Density")
coef_density_plot_gas_diff
percentile_gas <- ecdf(wide_coef_df$coef_diff_donor)
percentile_gas(0) # 0.7614 of data is to left of 0
coef_density_plot_donations_diff <- ggplot(data=wide_coef_df, aes(x=coef_diff_donor)) +
geom_density(alpha=0.2, fill=medsl_brands[1]) + theme_minimal() +
geom_vline(xintercept=0, col=medsl_brands[6],lwd=1.5,linetype="dotted") +
labs(title = "Difference in Donor Estimate", x="Difference in estimate",y="Density") + xlim(-1.2,1.2)
dquantile(wide_coef_df$coef_diff_donor, 0)
coef_density_plot_donations_diff
coef_density_plot_donations_diff <- ggplot(data=wide_coef_df, aes(x=coef_diff_donor)) +
geom_density(alpha=0.2, fill=medsl_brands[1]) + theme_minimal() +
geom_vline(xintercept=0, col=medsl_brands[6],lwd=1.5,linetype="dotted") +
labs(title = "Difference in Donor Estimate", x="Difference in estimate",y="Density") + xlim(-1.5,1.5)
coef_density_plot_donations_diff
coef_density_plot_gas_diff <- ggplot(data=wide_coef_df, aes(x=coef_diff_gas)) +
geom_density(alpha=0.2, fill=medsl_brands[1]) + theme_minimal() +
geom_vline(xintercept=0, col=medsl_brands[6],lwd=1.5,linetype="dotted") +
labs(title = "Difference in Gas Production Estimate", x="Difference in estimate",y="Density") + xlim(-1.5,1.5)
coef_density_plot_gas_diff
coef_density_plot_gas_diff <- ggplot(data=wide_coef_df, aes(x=coef_diff_gas)) +
geom_density(alpha=0.2, fill=medsl_brands[1]) + theme_minimal() +
geom_vline(xintercept=0, col=medsl_brands[6],lwd=1.5,linetype="dotted") +
labs(title = "Difference in Gas Production Estimate", x="Difference in estimate",y="Density")
coef_density_plot_gas_diff
coef_density_plot_gas_diff <- ggplot(data=wide_coef_df, aes(x=coef_diff_gas)) +
geom_density(alpha=0.2, fill=medsl_brands[1]) + theme_minimal() +
geom_vline(xintercept=0, col=medsl_brands[6],lwd=1.5,linetype="dotted") +
labs(title = "Difference in Gas Production Estimate", x="Difference in estimate",y="Density") + xlim(-0.6,0.6)
coef_density_plot_gas_diff
percentile_gas <- ecdf(wide_coef_df$coef_diff_gas)
percentile_gas(0) # 0.7614 of data is to left of 0
library(lmtest)
bptest(full_model)
bptest(orig1model)
ggsave("donor_coef_diff.jpeg", plot = coef_density_plot_donations_diff, scale = 1,
width = 9, height = 6, units = c("in"), dpi = 400)
ggsave("gas_coef_diff.jpeg", plot = coef_density_plot_gas_diff, scale = 1,
width = 9, height = 6, units = c("in"), dpi = 400)
ggsave("donor_coef_diff.jpg", plot = coef_density_plot_donations_diff, scale = 1,
width = 9, height = 6, units = c("in"), dpi = 400)
ggsave("donor_coef_diff.png", plot = coef_density_plot_donations_diff, scale = 1,
width = 9, height = 6, units = c("in"), dpi = 400)
getwd()
setwd(getwd())
ggsave("donor_coef_diff.png", plot = coef_density_plot_donations_diff, scale = 1,
width = 9, height = 6, units = c("in"), dpi = 400)
ggsave("donor_coef_diff.jpeg", plot = coef_density_plot_donations_diff, scale = 1,
width = 9, height = 6, units = c("in"), dpi = 400)
ggsave("gas_coef_diff.jpeg", plot = coef_density_plot_gas_diff, scale = 1,
width = 9, height = 6, units = c("in"), dpi = 400)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
caption_date <- paste0("Data source: New York Times Election Night reporting",
"\nGraph Source: MIT Elections Data and Science Lab\nGraph date:",
sep=" ", format(Sys.Date(),format="%m/%d/%Y"))
list.files()
medsl_brands <- c("#3791FF","#59CBF5","#C0BA79","#F6573E","#156DD0","#C72654","#FF6878")
nyt_counties <- read.csv("results/nyt_counties.csv")
head(nyt_counties)
View(nyt_counties)
nyt_counties$fips <- str_pad(nyt_counties$fips, width=5,pad="0",side="left")
nyt_counties$name <- str_to_upper(nyt_counties$name)
nyt_counties <- nyt_counties[,-c(10:15,17:23)]
names(nyt_counties)
View(nyt_counties)
nyt_counties$time_num <- as.numeric(as.POSIXct(nyt_counties$time))
head(nyt_counties$time_num)
nyt_counties$state <- str_to_upper(nyt_counties$state)
nyt_counties <- nyt_counties %>% group_by(state) %>% mutate(first_time=min(time_num,na.rm=T))
nyt_counties$time_count <- nyt_counties$time_num - nyt_counties$first_time
nyt_counties$interval15min <- cut(nyt_counties$time_count, breaks="15 min")
set.seed(4984)
dat = data.frame(time=seq(as.POSIXct("2016-05-01"), as.POSIXct("2016-05-01") + 60*99, by=60),
count=sample(1:50, 100, replace=TRUE))
str(dat)
str(nyt_counties$time)
nyt_counties$time <- as.POSIXct(nyt_counties$time)
nyt_counties$interval15min <- cut(nyt_counties$time, breaks="15 min")
head(nyt_counties$interval15min)
sort(unique(nyt_counties$interval15min))[1:100]
nyt_counties <- nyt_counties %>% group_by(state) %>% mutate(first_time_fac=min(interval15min,na.rm=T))
nyt_counties <- nyt_counties %>% group_by(fips) %>% mutate(lag_timecount = lag(time_count))
nyt_counties$time_count_chg <- (nyt_counties$time_count-nyt_counties$lag_timecount)/3600
summary(nyt_counties$time_count_chg)
nyt_counties <- nyt_counties %>% group_by(fips) %>% mutate(lage_vote_total=lag(total.votes))
nyt_counties$vote_chg <- nyt_counties$total.votes - nyt_counties$lage_vote_total
nyt_counties$vote_velocity <- nyt_counties$vote_chg/nyt_counties$time_count_chg
summary(nyt_counties$vote_velocity)
nyt_counties$vote_velocity <- (nyt_counties$vote_chg/1000)/nyt_counties$time_count_chg
summary(nyt_counties$vote_velocity)
state_vec <- sort(unique(nyt_counties$state))
temp_nyt <- subset(nyt_counties, state==state_vec[i])
temp_nyt$interval15min <- cut(temp_nyt$time, breaks="15 min")
View(temp_nyt)
as.numeric(temp_nyt$interval15min[138204])
as.numeric(temp_nyt$interval15min[1])
nrow(temp_nyt)
as.numeric(temp_nyt$interval15min[587])
nyt_counties2 <- data.frame(stringsAsFactors = FALSE)
temp_nyt <- subset(nyt_counties, state==state_vec[i])
temp_nyt$interval15min <- cut(temp_nyt$time, breaks="15 min")
temp_nyt$interval15min_num <- as.numeric(temp_nyt$interval15min)
min(temp_nyt$interval15min_num)
max(temp_nyt$interval15min_num)
min_seq <- as.data.frame(seq(min(temp_nyt$interval15min_num),max(temp_nyt$interval15min_num),by=1))
county_seq <- as.data.frame(sort(unique(temp_nyt$fips)))
temp_nyt2 <- merge(county_seq,min_seq,by=NULL)
View(9temp_nyt2)
View(temp_nyt2)
temp_nyt <- temp_nyt %>% group_by(fips,name,state,interval15min,interval15min_num) %>%
summarise(tot_exp_vote=max(tot_exp_vote), total.votes=sum(total.votes,na.rm=T),trumpd=sum(trumpd,na.rm=T),bidenj=sum(bidenj,na.rm=T),
abs_trumpd=sum(abs_trumpd,na.rm=T),abs_bidenj=sum(abs_bidenj,na.rm=T))
temp_nyt2 <- merge(temp_nyt2, temp_nyt, by=c("fips","interval15min_num"),all.x=T)
temp_nyt2 <- merge(county_seq,min_seq,by=NULL)
colnames(temp_nyt2) <- c("fips","interval15min_num")
temp_nyt2 <- merge(temp_nyt2, temp_nyt, by=c("fips","interval15min_num"),all.x=T)
View(temp_nyt2)
library(zoo)
library(tidyr)
names(temp_nyt2)
temp_nyt2 <- temp_nyt2 %>% group_by(fips) %>%
fill(name,state,tot_exp_vote, total.votes,trumpd,bidenj,abs_trumpd,abs_bidenj) %>%
fill(name,state,tot_exp_vote, total.votes,trumpd,bidenj,abs_trumpd,abs_bidenj, .direction="down")
sum(is.na(temp_nyt2$bidenj))
min_seq <- as.data.frame(seq(min(temp_nyt$interval15min_num),max(temp_nyt$interval15min_num),by=1))
county_seq <- as.data.frame(sort(unique(temp_nyt$fips)))
temp_nyt2 <- merge(county_seq,min_seq,by=NULL)
colnames(temp_nyt2) <- c("fips","interval15min_num")
temp_nyt2 <- merge(temp_nyt2, temp_nyt, by=c("fips","interval15min_num"),all.x=T)
test_sub <- subset(temp_nyt2,interval15min_num < 5 )
View(test_sub)
length(unique(temp_nyt$fips))
test_sub <- subset(temp_nyt2,interval15min_num ==1 )
View(test_sub)
nyt_counties2 <- data.frame(stringsAsFactors = FALSE)
for(i in 1:length(state_vec)){
print(state_vec[i])
temp_nyt <- subset(nyt_counties, state==state_vec[i])
temp_nyt$interval15min <- cut(temp_nyt$time, breaks="15 min")
temp_nyt$interval15min_num <- as.numeric(temp_nyt$interval15min)
###we will then want to collapse data, then merge onto time series style df
temp_nyt <- temp_nyt %>% group_by(fips,name,state,interval15min,interval15min_num) %>%
summarise(tot_exp_vote=max(tot_exp_vote), total.votes=sum(total.votes,na.rm=T),trumpd=sum(trumpd,na.rm=T),bidenj=sum(bidenj,na.rm=T),
abs_trumpd=sum(abs_trumpd,na.rm=T),abs_bidenj=sum(abs_bidenj,na.rm=T))
###create time seq
min_seq <- as.data.frame(seq(min(temp_nyt$interval15min_num),max(temp_nyt$interval15min_num),by=1))
county_seq <- as.data.frame(sort(unique(temp_nyt$fips)))
temp_nyt2 <- merge(county_seq,min_seq,by=NULL)
colnames(temp_nyt2) <- c("fips","interval15min_num")
temp_nyt2 <- merge(temp_nyt2, temp_nyt, by=c("fips","interval15min_num"),all.x=T)
temp_nyt2 <- temp_nyt2 %>% group_by(fips) %>%
fill(name,state,tot_exp_vote, total.votes,trumpd,bidenj,abs_trumpd,abs_bidenj) %>%
fill(name,state,tot_exp_vote, total.votes,trumpd,bidenj,abs_trumpd,abs_bidenj, .direction="down")
if(nrow(nyt_counties2)==0){
nyt_counties2 <- temp_nyt2
}else{
nyt_counties2 <- rbind(nyt_counties2,temp_nyt2)
}
}
View(nyt_counties2)
?lag
nyt_counties2 <- nyt_counties2 %>% group_by(fips) %>% mutate(lag_total_votes=lag(total.votes, default=0),
lag_bidenj=lag(bidenj,default=0),
lag_trumpd=lag(trumpd,default=0))
nyt_counties2$total_vote_chg <- nyt_counties2$total.votes-nyt_counties2$lag_total_votes
nyt_counties2$biden_chg <- nyt_counties2$bidenj - nyt_counties2$lag_bidenj
nyt_counties2$trump_chg <- nyt_counties2$trumpd - nyt_counties2$lag_trumpd
View(nyt_counties2)
summary(nyt_counties2$trump_chg)
length(which(nyt_counties2$trump_chg<0))
length(which(nyt_counties2$biden_chg<0))
biden_bias <- subset(nyt_counties2, trump_chg < 0 & trump_chg < biden_chg)
View(biden_bias)
table(biden_bias$state)
nrow(biden_bias)/length(which(nyt_counties2$trump_chg<0))
nrow(biden_bias)/length(which(nyt_counties2$total_vote_chg<0))
summary(biden_bias$total_vote_chg)
saveRDS(nyt_counties2,"results/nyt15minute_county_data.rds")
nyt_counties_final <- nyt_counties2 %>% group_by(fips) %>% slice(which.max(interval15min_num))
nrow(nyt_counties_final)
nyt_counties2$dem_pct <- (nyt_counties2$bidenj/nyt_counties2$total.votes)*100
nyt_counties2$dem2party_pct <- (nyt_counties2$bidenj/(nyt_counties2$bidenj+nyt_counties2$trumpd))*100
saveRDS(nyt_counties2,"results/nyt15minute_county_data.rds")
write.csv(nyt_counties2,"results/nyt15minute_county_data.csv",row.names=FALSE)
nyt_counties_final <- nyt_counties2 %>% group_by(fips) %>% slice(which.max(interval15min_num))
View(nyt_counties_final)
state_vec <- sort(unique(nyt_counties$state))
nyt_counties2 <- data.frame(stringsAsFactors = FALSE)
for(i in 1:length(state_vec)){
print(state_vec[i])
temp_nyt <- subset(nyt_counties, state==state_vec[i])
temp_nyt$interval15min <- cut(temp_nyt$time, breaks="15 min")
temp_nyt$interval15min_num <- as.numeric(temp_nyt$interval15min)
###we will then want to collapse data, then merge onto time series style df
temp_nyt <- temp_nyt %>% group_by(fips,name,state,interval15min,interval15min_num) %>%
summarise(tot_exp_vote=max(tot_exp_vote), total.votes=max(total.votes,na.rm=T),trumpd=max(trumpd,na.rm=T),bidenj=max(bidenj,na.rm=T),
abs_trumpd=max(abs_trumpd,na.rm=T),abs_bidenj=max(abs_bidenj,na.rm=T))
###create time seq
min_seq <- as.data.frame(seq(min(temp_nyt$interval15min_num),max(temp_nyt$interval15min_num),by=1))
county_seq <- as.data.frame(sort(unique(temp_nyt$fips)))
temp_nyt2 <- merge(county_seq,min_seq,by=NULL)
colnames(temp_nyt2) <- c("fips","interval15min_num")
temp_nyt2 <- merge(temp_nyt2, temp_nyt, by=c("fips","interval15min_num"),all.x=T)
temp_nyt2 <- temp_nyt2 %>% group_by(fips) %>%
fill(name,state,tot_exp_vote, total.votes,trumpd,bidenj,abs_trumpd,abs_bidenj) %>%
fill(name,state,tot_exp_vote, total.votes,trumpd,bidenj,abs_trumpd,abs_bidenj, .direction="down")
if(nrow(nyt_counties2)==0){
nyt_counties2 <- temp_nyt2
}else{
nyt_counties2 <- rbind(nyt_counties2,temp_nyt2)
}
}
nyt_counties2 <- nyt_counties2 %>% group_by(fips) %>% mutate(lag_total_votes=lag(total.votes, default=0),
lag_bidenj=lag(bidenj,default=0),
lag_trumpd=lag(trumpd,default=0))
nyt_counties2$total_vote_chg <- nyt_counties2$total.votes-nyt_counties2$lag_total_votes
nyt_counties2$biden_chg <- nyt_counties2$bidenj - nyt_counties2$lag_bidenj
nyt_counties2$trump_chg <- nyt_counties2$trumpd - nyt_counties2$lag_trumpd
summary(nyt_counties2$trump_chg)
length(which(nyt_counties2$trump_chg<0)) # 38315
length(which(nyt_counties2$biden_chg<0)) # 38313
biden_bias <- subset(nyt_counties2, trump_chg < 0 & trump_chg < biden_chg)
nrow(biden_bias)/length(which(nyt_counties2$total_vote_chg<0))
summary(biden_bias$total_vote_chg)
nyt_counties2$dem_pct <- (nyt_counties2$bidenj/nyt_counties2$total.votes)*100
nyt_counties2$dem2party_pct <- (nyt_counties2$bidenj/(nyt_counties2$bidenj+nyt_counties2$trumpd))*100
View(nyt_counties2)
temp_nyt <- subset(nyt_counties, state==state_vec[i])
temp_nyt$interval15min <- cut(temp_nyt$time, breaks="15 min")
temp_nyt$interval15min_num <- as.numeric(temp_nyt$interval15min)
View(temp_nyt)
temp_nyt %>% group_by(fips) %>% max(total.votes)
temp_nyt %>% group_by(fips) %>% summarise(max(total.votes))
nyt_counties <- nyt_counties %>% group_by(fips) %>% mutate(lage_vote_total=lag(votes))
nyt_counties$vote_chg <- nyt_counties$votes - nyt_counties$votes
nyt_counties$vote_velocity <- (nyt_counties$vote_chg/1000)/nyt_counties$time_count_chg
summary(nyt_counties$vote_velocity)
state_vec <- sort(unique(nyt_counties$state))
nyt_counties2 <- data.frame(stringsAsFactors = FALSE)
for(i in 1:length(state_vec)){
print(state_vec[i])
temp_nyt <- subset(nyt_counties, state==state_vec[i])
temp_nyt$interval15min <- cut(temp_nyt$time, breaks="15 min")
temp_nyt$interval15min_num <- as.numeric(temp_nyt$interval15min)
###we will then want to collapse data, then merge onto time series style df
temp_nyt <- temp_nyt %>% group_by(fips,name,state,interval15min,interval15min_num) %>%
summarise(tot_exp_vote=max(tot_exp_vote), total.votes=max(votes,na.rm=T),trumpd=max(trumpd,na.rm=T),bidenj=max(bidenj,na.rm=T),
abs_trumpd=max(abs_trumpd,na.rm=T),abs_bidenj=max(abs_bidenj,na.rm=T))
###create time seq
min_seq <- as.data.frame(seq(min(temp_nyt$interval15min_num),max(temp_nyt$interval15min_num),by=1))
county_seq <- as.data.frame(sort(unique(temp_nyt$fips)))
temp_nyt2 <- merge(county_seq,min_seq,by=NULL)
colnames(temp_nyt2) <- c("fips","interval15min_num")
temp_nyt2 <- merge(temp_nyt2, temp_nyt, by=c("fips","interval15min_num"),all.x=T)
temp_nyt2 <- temp_nyt2 %>% group_by(fips) %>%
fill(name,state,tot_exp_vote, total.votes,trumpd,bidenj,abs_trumpd,abs_bidenj) %>%
fill(name,state,tot_exp_vote, total.votes,trumpd,bidenj,abs_trumpd,abs_bidenj, .direction="down")
if(nrow(nyt_counties2)==0){
nyt_counties2 <- temp_nyt2
}else{
nyt_counties2 <- rbind(nyt_counties2,temp_nyt2)
}
}
nyt_counties2 <- nyt_counties2 %>% group_by(fips) %>% mutate(lag_total_votes=lag(total.votes, default=0),
lag_bidenj=lag(bidenj,default=0),
lag_trumpd=lag(trumpd,default=0))
nyt_counties2$total_vote_chg <- nyt_counties2$total.votes-nyt_counties2$lag_total_votes
nyt_counties2$biden_chg <- nyt_counties2$bidenj - nyt_counties2$lag_bidenj
nyt_counties2$trump_chg <- nyt_counties2$trumpd - nyt_counties2$lag_trumpd
summary(nyt_counties2$trump_chg)
View(nyt_counties2)
nyt_counties2$prop_expect_returned <- (nyt_counties2$total.votes/nyt_counties2$tot_exp_vote)*100
summary(nyt_counties2$prop_expect_returned)
odd_sub <- subset(nyt_counties2,  prop_expect_returned > 100)
odd_sub <- subset(nyt_counties2,  prop_expect_returned > 200)
View(odd_sub)
152350/402000
summary(nyt_counties2$trump_chg)
length(which(nyt_counties2$trump_chg<0)) # 38315
length(which(nyt_counties2$biden_chg<0)) # 38313
biden_bias <- subset(nyt_counties2, trump_chg < 0 & trump_chg < biden_chg)
nrow(biden_bias)/length(which(nyt_counties2$total_vote_chg<0))
summary(biden_bias$total_vote_chg)
nyt_counties2$dem_pct <- (nyt_counties2$bidenj/nyt_counties2$total.votes)*100
nyt_counties2$dem2party_pct <- (nyt_counties2$bidenj/(nyt_counties2$bidenj+nyt_counties2$trumpd))*100
View(nyt_counties2)
saveRDS(nyt_counties2,"results/nyt15minute_county_data.rds")
write.csv(nyt_counties2,"results/nyt15minute_county_data.csv",row.names=FALSE)
nyt_counties_final <- nyt_counties2 %>% group_by(fips) %>% slice(which.max(interval15min_num))
nrow(nyt_counties_final)
View(nyt_counties_final)
str(nyt_counties$time)
nyt_counties_final <- nyt_counties2 %>% group_by(fips) %>% slice(which.max(interval15min_num))
nrow(nyt_counties_final)
View(nyt_counties_final)
write.csv(nyt_counties_final, "nyt_counties_final12042020.csv",row.names = FALSE)
names(nyt_counties2)
nyt_counties2 <- nyt_counties2 %>% group_by(fips) %>% mutate(final_vote=max(total.votes,na.rm=T))
nyt_counties2$returned_pct <- (nyt_counties2$total.votes/nyt_counties2$final_vote)*100
temp_state <- subset(nyt_counties2, state==state_vec[i])
temp_state <- temp_state %>% group_by(fips) %>% mutate(final_vote=max(total.votes,na.rm=T))
temp_ts_plot <- ggplot(temp_state, aes(x=interval15min_num, y=returned_pct, group=fips)) %>%
geom_line(alpha=0.4, col="lightgray")
temp_ts_plot <- ggplot(temp_state, aes(x=interval15min_num, y=returned_pct, group=fips)) +
geom_line(alpha=0.4, col="lightgray")
temp_ts_plot
temp_ts_plot <- ggplot(temp_state, aes(x=interval15min_num, y=returned_pct, group=fips)) +
geom_line(alpha=0.4, col="lightgray") + theme_minimal() + xlim(0,24)
temp_ts_plot
24*4
temp_ts_plot <- ggplot(temp_state, aes(x=interval15min_num, y=returned_pct, group=fips)) +
geom_line(alpha=0.4, col="lightgray") + theme_minimal() + xlim(0,96)
temp_ts_plot
max(temp_state$interval15min_num)
2042*4
8168/24
8168/60
temp_ts_plot <- ggplot(temp_state, aes(x=interval15min_num, y=returned_pct, group=fips)) +
geom_line(alpha=0.4, col="lightgray", lwd=1.2) + theme_minimal() + xlim(0,500)
temp_ts_plot
temp_ts_plot <- ggplot(temp_state, aes(x=interval15min_num, y=returned_pct, group=fips)) +
geom_line(alpha=0.4, col="lightgray", lwd=1.2) + theme_minimal() + xlim(0,500) +
theme(title = element_text(size = rel(1.2), family="Styrene B"))
temp_ts_plot
caption_date <- paste0("Data source: New York Times Election Night reporting",
"\nGraph Source: MIT Elections Data and Science Lab\nGraph date:",
sep=" ", format(Sys.Date(),format="%m/%d/%Y"))
temp_ts_plot <- ggplot(temp_state, aes(x=interval15min_num, y=returned_pct, group=fips)) +
geom_line(alpha=0.4, col="lightgray", lwd=1.2) + theme_minimal() + xlim(0,500) +
theme(title = element_text(size = rel(1.2), family="Styrene B")) +
labs(title="Time to process county ballots",x="Time (15 minute intervals from first returns)",y="% returned",
caption = caption_date)
temp_ts_plot
temp_ts_plot <- ggplot(temp_state, aes(x=interval15min_num, y=returned_pct, group=fips)) +
geom_line(alpha=0.4, col="lightgray", lwd=1.2) + theme_minimal() + xlim(0,500) +
theme(title = element_text(size = rel(1.2), family="Styrene B"),
plot.caption = element_text(hjust=0),panel.grid.minor = element_blank()) +
labs(title="Time to process county ballots",x="Time (15 minute intervals from first returns)",y="% tabulated",
caption = caption_date)
temp_ts_plot
temp_ts_plot <- ggplot(temp_state, aes(x=interval15min_num, y=returned_pct, group=fips)) +
geom_line(alpha=0.4, col="lightgray", lwd=1.2) + theme_minimal() + xlim(0,500) +
theme(title = element_text(size = rel(1.2), family="Styrene B"),
plot.caption = element_text(hjust=0),panel.grid.minor = element_blank()) +
labs(title="Time to tabulate ballots, by county",x="Time (15 minute intervals from first returns)",y="% tabulated",
caption = caption_date)
temp_ts_plot
temp_state <- subset(nyt_counties2, state==state_vec[i])
temp_state <- temp_state %>% group_by(fips) %>% mutate(final_vote=max(total.votes,na.rm=T))
temp_ts_plot <- ggplot(temp_state, aes(x=interval15min_num, y=returned_pct, group=fips)) +
geom_line(alpha=0.4, col="lightgray", lwd=1.2) + theme_minimal() + xlim(0,500) +
theme(title = element_text(size = rel(1.2), family="Styrene B"),
plot.caption = element_text(hjust=0),panel.grid.minor = element_blank()) +
labs(title=paste(str_to_title(state_vec[i]),sep=" ", "time to tabulate ballots, by county"),
x="Time (15 minute intervals from first returns)",y="% tabulated",
caption = caption_date)
temp_ts_plot
setwd("results/plots/county_tabulate")
500*15
7500/60
for(i in 1:length(state_vec)){
temp_state <- subset(nyt_counties2, state==state_vec[i])
temp_state <- temp_state %>% group_by(fips) %>% mutate(final_vote=max(total.votes,na.rm=T))
temp_ts_plot <- ggplot(temp_state, aes(x=interval15min_num, y=returned_pct, group=fips)) +
geom_line(alpha=0.4, col="lightgray", lwd=1.2) + theme_minimal() + xlim(0,500) +
theme(title = element_text(size = rel(1.2), family="Styrene B"),
plot.caption = element_text(hjust=0),panel.grid.minor = element_blank()) +
labs(title=paste(str_to_title(state_vec[i]),sep=" ", "time to tabulate ballots, by county"),
x="Time (15 minute intervals from first returns)",y="% tabulated",
caption = caption_date)
temp_ts_plot
ggsave(paste0(state_vec[i],sep="_", "tabulate_plot",sep="", ".png"), plot = temp_ts_plot, scale = 1,
width = 9, height = 6, units = c("in"), dpi = 600)
}
for(i in 1:length(state_vec)){
temp_state <- subset(nyt_counties2, state==state_vec[i])
temp_state <- temp_state %>% group_by(fips) %>% mutate(final_vote=max(total.votes,na.rm=T))
temp_ts_plot <- ggplot(temp_state, aes(x=interval15min_num, y=returned_pct, group=fips)) +
geom_line(alpha=0.4, col=medsl_brands[1], lwd=1.2) + theme_minimal() + xlim(0,500) +
theme(title = element_text(size = rel(1.2), family="Styrene B"),
plot.caption = element_text(hjust=0),panel.grid.minor = element_blank()) +
labs(title=paste(str_to_title(state_vec[i]),sep=" ", "time to tabulate ballots, by county"),
x="Time (15 minute intervals from first returns)",y="% tabulated",
caption = caption_date)
temp_ts_plot
ggsave(paste0(state_vec[i],sep="_", "tabulate_plot",sep="", ".png"), plot = temp_ts_plot, scale = 1,
width = 9, height = 6, units = c("in"), dpi = 600)
}
View(nyt_counties_final)
nrow(nyt_counties_final)
class(nyt_counties_final)
nyt_counties_final <- as.data.frame()
nyt_counties_final <- nyt_counties2 %>% group_by(fips) %>% slice(which.max(interval15min_num))
nyt_counties_final <- as.data.frame(nyt_counties_final)
write.csv(nyt_counties_final, "nyt_counties_final12042020.csv",row.names = FALSE)
table(nyt_counties_final$state)
15*500
7500/60
125/24
100*15
1500/60
24*16
24*60
1440/15
6*96
72+24
96+24
temp_state <- subset(nyt_counties2, state==state_vec[i])
temp_state <- temp_state %>% group_by(fips) %>% mutate(final_vote=max(total.votes,na.rm=T))
temp_ts_plot <- ggplot(temp_state, aes(x=interval15min_num, y=returned_pct, group=fips)) +
geom_line(alpha=0.4, col=medsl_brands[1], lwd=1.2) + theme_minimal() + xlim(0,500) +
theme(title = element_text(size = rel(1.2), family="Styrene B"),
plot.caption = element_text(hjust=0),panel.grid.minor = element_blank(),
axis.text.x = element_text(angle = 45,vjust=0.5)) +
labs(title=paste(str_to_title(state_vec[i]),sep=" ", "time to tabulate ballots, by county"),
x="Time (15 minute intervals from first returns)",y="% tabulated",
caption = caption_date)  +
scale_x_continuous(breaks = seq(1,576,by=96), labels=c("24 hours", "48 hours", "72 hours", "96 hours", "120 hours", "144 hours"))
temp_ts_plot <- ggplot(temp_state, aes(x=interval15min_num, y=returned_pct, group=fips)) +
geom_line(alpha=0.4, col=medsl_brands[1], lwd=1.2) + theme_minimal() +
theme(title = element_text(size = rel(1.2), family="Styrene B"),
plot.caption = element_text(hjust=0),panel.grid.minor = element_blank(),
axis.text.x = element_text(angle = 45,vjust=0.5)) +
labs(title=paste(str_to_title(state_vec[i]),sep=" ", "time to tabulate ballots, by county"),
x="Time (15 minute intervals from first returns)",y="% tabulated",
caption = caption_date)  +
scale_x_continuous(breaks = seq(1,576,by=96), labels=c("24 hours", "48 hours", "72 hours", "96 hours", "120 hours", "144 hours"))
temp_ts_plot
?scale_x_continuous
temp_ts_plot <- ggplot(temp_state, aes(x=interval15min_num, y=returned_pct, group=fips)) +
geom_line(alpha=0.4, col=medsl_brands[1], lwd=1.2) + theme_minimal() +
theme(title = element_text(size = rel(1.2), family="Styrene B"),
plot.caption = element_text(hjust=0),panel.grid.minor = element_blank(),
axis.text.x = element_text(angle = 45,vjust=0.5)) +
labs(title=paste(str_to_title(state_vec[i]),sep=" ", "time to tabulate ballots, by county"),
x="Time (15 minute intervals from first returns)",y="% tabulated",
caption = caption_date)  +
scale_x_continuous(breaks = seq(1,576,by=96), labels=c("24", "48", "72", "96", "120", "144"), limits = c(0,576))
temp_ts_plot
temp_ts_plot <- ggplot(temp_state, aes(x=interval15min_num, y=returned_pct, group=fips)) +
geom_line(alpha=0.4, col=medsl_brands[1], lwd=1.2) + theme_minimal() +
theme(title = element_text(size = rel(1.2), family="Styrene B"),
plot.caption = element_text(hjust=0),panel.grid.minor = element_blank(),
axis.text.x = element_text(angle = 45,vjust=0.5)) +
labs(title=paste(str_to_title(state_vec[i]),sep=" ", "time to tabulate ballots, by county"),
x="Time (15 minute intervals from first returns)",y="% tabulated",
caption = caption_date)  +
scale_x_continuous(breaks = seq(1,576,by=96), labels=c("Nov-3", "Nov-4", "Nov-5", "Nov-6", "Nov-7", "Nov-8"), limits = c(0,576))
temp_ts_plot
temp_ts_plot <- ggplot(temp_state, aes(x=interval15min_num, y=returned_pct, group=fips)) +
geom_line(alpha=0.4, col=medsl_brands[1], lwd=1.2) + theme_minimal() +
theme(title = element_text(size = rel(1.2), family="Styrene B"),
plot.caption = element_text(hjust=0),panel.grid.minor = element_blank(),
axis.text.x = element_text(angle = 45,vjust=0.5)) +
labs(title=paste(str_to_title(state_vec[i]),sep=" ", "time to tabulate ballots, by county"),
x="Time from polls closing",y="% tabulated",
caption = caption_date)  +
scale_x_continuous(breaks = seq(1,576,by=96), labels=c("Nov-3", "Nov-4", "Nov-5", "Nov-6", "Nov-7", "Nov-8"), limits = c(0,576))
temp_ts_plot
for(i in 1:length(state_vec)){
temp_state <- subset(nyt_counties2, state==state_vec[i])
temp_state <- temp_state %>% group_by(fips) %>% mutate(final_vote=max(total.votes,na.rm=T))
temp_ts_plot <- ggplot(temp_state, aes(x=interval15min_num, y=returned_pct, group=fips)) +
geom_line(alpha=0.4, col=medsl_brands[1], lwd=1.2) + theme_minimal() +
theme(title = element_text(size = rel(1.2), family="Styrene B"),
plot.caption = element_text(hjust=0),panel.grid.minor = element_blank(),
axis.text.x = element_text(angle = 45,vjust=0.5)) +
labs(title=paste(str_to_title(state_vec[i]),sep=" ", "time to tabulate ballots, by county"),
x="Time from polls closing",y="% tabulated",
caption = caption_date)  +
scale_x_continuous(breaks = seq(1,576,by=96), labels=c("Nov-3", "Nov-4", "Nov-5", "Nov-6", "Nov-7", "Nov-8"), limits = c(0,576))
###we want to go with intervals of 96, which would be one day
temp_ts_plot
ggsave(paste0(state_vec[i],sep="_", "tabulate_plot",sep="", ".png"), plot = temp_ts_plot, scale = 1,
width = 9, height = 6, units = c("in"), dpi = 600)
}
View(nyt_counties)
